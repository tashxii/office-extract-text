<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="APP_DESCRIPTION" xml:space="preserve">
    <value>Extract text from excel, word, powerpoint files and save as &lt;filename&gt;+'.txt' file in the specified output directory.</value>
  </data>
  <data name="ERROR_PREFIX" xml:space="preserve">
    <value>ERROR: </value>
  </data>
  <data name="EXCEL_OPTION" xml:space="preserve">
    <value>Extract excel files. 
                   If -e, -w and -p options are not specified, 
                   all office(excel, word, powerpoint) files are extracted.</value>
  </data>
  <data name="EXTRACTING_FINISHED_SUCCESSFULLY" xml:space="preserve">
    <value>Extracting text is finished successfully.</value>
  </data>
  <data name="EXTRACTING_FINISHED_WITH_ERROR_DETAILS_ARG0" xml:space="preserve">
    <value>Extracting text is finished with error(s).
Details:{0}</value>
  </data>
  <data name="EXTRACTING_FINISHED_WITH_WARNING" xml:space="preserve">
    <value>Extracting text is finished with warning(s).</value>
  </data>
  <data name="EXTRACTING_STARTED_PATH_ARG0" xml:space="preserve">
    <value>Extracting text is started for the following path.
Path:{0}</value>
  </data>
  <data name="EXTRACTING_TEXT_PATH_ARG0" xml:space="preserve">
    <value>Extracting text. Path:{0}</value>
  </data>
  <data name="LOG_PREFIX" xml:space="preserve">
    <value>LOG: </value>
  </data>
  <data name="NOLOG_OPTION" xml:space="preserve">
    <value>Extract without log messages.</value>
  </data>
  <data name="NOT_TARGET_OFFICE_FILE_PATH_ARG0" xml:space="preserve">
    <value>Specified path is not an office file. Path:{0}</value>
  </data>
  <data name="NO_TARGET_FILE_IN_SPECIFIED_DIRECTORY_PATH_ARG0" xml:space="preserve">
    <value>No target office file in the specifined directory. Path:{0}</value>
  </data>
  <data name="NO_TARGET_FOUND" xml:space="preserve">
    <value>No target office file found.</value>
  </data>
  <data name="OUTPUT_OPTION" xml:space="preserve">
    <value>&lt;output_directory&gt;(Required) Specify output directory of text files. </value>
  </data>
  <data name="POWERPOINT_OPTION" xml:space="preserve">
    <value>Extract powerpoint files.</value>
  </data>
  <data name="SKIPPED_EXTRACTING_TEXT_PATH_ARG0_DETAILS_ARG1" xml:space="preserve">
    <value>Skip extracting text due to the following error. Path:{0}
Details:{1}</value>
  </data>
  <data name="SPECIFIED_FILE_PATH_IS_NOT_TARGET_FILE_PATH_ARG0" xml:space="preserve">
    <value>Speficied file path is not a target office file. Path:{0}</value>
  </data>
  <data name="SPECIFIED_PATH_IS_NOT_FILE_NOR_DIRECTORY_PATH_ARG0" xml:space="preserve">
    <value>Specified path is not existing or invalid. Path:{0}</value>
  </data>
  <data name="STOP_EXTRACTING_TEXT_PATH_ARG0_DETAILS_ARG1" xml:space="preserve">
    <value>Stop extracting text because of an error. Path:{0}
Details:{1}</value>
  </data>
  <data name="SUBDIR_OPTION" xml:space="preserve">
    <value>Extract files in all sub directories.</value>
  </data>
  <data name="TARGET_PATH_ARGUMENT" xml:space="preserve">
    <value>Specify target file path or directory.</value>
  </data>
  <data name="WARNING_PREFIX" xml:space="preserve">
    <value>WARNING: </value>
  </data>
  <data name="WORD_OPTION" xml:space="preserve">
    <value>Extract word files.</value>
  </data>
</root>